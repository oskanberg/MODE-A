@namespace(uri="MediaLibrary", prefix="MediaLibrary")

package MediaLibrary;

class Ecosystem {
	val Library[1..*] libraries;
	val Device[1..*] devices;
	val MediaSource[1..*] mediaSources;
	val Artifact[1..*] mediaArtifacts;
}

class Library {
	attr String name;
	val MediaCollection[*] collections;
}

class MediaCollection {
	attr String name;
	ref Artifact[1..*] members;
	// host is the device that can sync
	ref Device[1]#hostOf host;
	ref Device[1..*]#collections syncedDevices;
}

/***** Devices ****/

abstract class Device {
	attr String MACAddress;
	attr int resolutionWidth;
	attr int resolutionHeight;
	ref MediaCollection[*]#host hostOf;
	ref MediaCollection[*]#syncedDevices collections;
}

class Tablet extends Device {
	
}
class Computer extends Device {
	
}
class Smartphone extends Device {
	
}
class EReader extends Device {
	attr Boolean videoEnabled;
	attr Boolean audioEnabled;
}

/***** Media Artifacts ****/

// all media types inherit artifact
abstract class Artifact {
	attr String name;
	attr String author;
	ref MediaSource[1]#contents origin;
}

// things that have duration 
abstract class DurationArtifact extends Artifact {
	// duration is in miliseconds
	// on int64, that's max ~597h
	attr int duration;
}

class AudioBook extends DurationArtifact {
	attr int currentPosition;
}
class MusicTrack extends DurationArtifact {
	attr String label;
}
class Video extends DurationArtifact {
	attr String fps;
}

// things that do not have duration
class Ebook extends Artifact {
	attr int pages;
}
class Image extends Artifact {
	attr String dateTaken;
}


/***** Media Sources ****/

// all sources inherit MediaSource
abstract class MediaSource {
	ref Artifact[*]#origin contents;
}

enum SourceType {
	CD;
	CASSETTE;
	HDD;
	OTHER;
}

class ExternalSource extends MediaSource {
	attr SourceType sourceType;
}

class Store extends MediaSource {
	attr String name;
	attr String url;
}

